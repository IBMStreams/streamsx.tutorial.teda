namespace teda.import;

use demoapp.streams::*;


composite DemoappImportDedup {
	graph
	
		stream<TypesCommon.TransformerOutType> In = Import() {
			param subscription : ite=="demoapp.context_output_Dedup";
			     // filter: (cdrRecordType == 2ub);
		}

		stream<I> ImportedContextData as O = Custom(In as I) { 
			logic
			state: {
				mutable int64 _seqNo = 0l;
			}			
			onTuple I: {
				if (filename != "") {
					_seqNo++;
					submit (I, O); 
				}
			}
			config threadedPort : queue(I, Sys.Wait, 10000);
		}
		
	    () as DummySink = Custom(ImportedContextData as I) { 
	       	logic
	       	onTuple I: {
	       		// do nothing here
	       	}
	    }		
}

composite DemoappImportDedupSlow {
	graph
	
		stream<TypesCommon.TransformerOutType> In = Import() {
			param subscription : ite=="demoapp.context_output_Dedup";
			     // filter: (cdrRecordType == 2ub);
		}

		stream<I> ImportedContextData as O = Custom(In as I) { 
			logic
			state: {
				mutable int64 _seqNo = 0l;
			}			
			onTuple I: {
				if (filename != "") {
					_seqNo++;
					if (1l == (_seqNo % 10000l)) {
						block(3.0);
       				}
					submit (I, O); 
				}
			}
		}
		
	    () as DummySink = Custom(ImportedContextData as I) { 
	       	logic
	       	onTuple I: {
	       		// do nothing here
	       	}
	    }		
}
